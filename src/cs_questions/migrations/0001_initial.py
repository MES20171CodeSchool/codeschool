# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-10 21:46
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import wagtail.wagtailcore.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cs_courses', '0002_auto_20160409_2252'),
        ('cs_core', '0001_initial'),
        ('cs_activities', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CodeIoFeedback',
            fields=[
                ('feedback_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_activities.Feedback')),
                ('case', models.TextField()),
                ('answer_key', models.TextField()),
                ('status', models.CharField(max_length=20)),
                ('hint', models.TextField(blank=True)),
                ('message', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_activities.feedback',),
        ),
        migrations.CreateModel(
            name='CodingIoAnswerKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.TextField(blank=True, help_text='Source code for the correct answer in the given programming language', verbose_name='Answer source code')),
                ('placeholder', models.TextField(blank=True, help_text='This optional field controls which code should be placed in the source code editor when a question is opened. This is useful to put boilerplate or even a full program that the student should modify. It is possible to configure a global per-language boilerplate and leave this field blank.', verbose_name='Placeholder source code')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs_core.ProgrammingLanguage')),
            ],
            options={
                'verbose_name_plural': 'answer keys',
                'verbose_name': 'answer key',
            },
        ),
        migrations.CreateModel(
            name='IoSpecExpansion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash', models.CharField(max_length=32)),
                ('needs_expansion', models.BooleanField(default=True)),
                ('source', models.TextField(blank=True)),
                ('invalid_languages', models.ManyToManyField(blank=True, related_name='invalid_expansions', to='cs_core.ProgrammingLanguage')),
                ('validated_languages', models.ManyToManyField(blank=True, related_name='valid_expansions', to='cs_core.ProgrammingLanguage')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('short_description', models.CharField(help_text='The short description is used in listings and should present a brief one phrase description of the question.', max_length=140, verbose_name='short description')),
                ('long_description', wagtail.wagtailcore.fields.RichTextField(help_text='The long and detailed description of the question that isshown in the question submission form. This field expects markdown markup.', verbose_name='long description')),
                ('author_name', models.CharField(blank=True, max_length=100, verbose_name="Author's name")),
                ('comment', models.TextField(blank=True, help_text='The comments field is for any private information that you should want to associate to the object. This field is private and its contents are never revealed publicly.', verbose_name='Comments')),
            ],
            options={
                'permissions': (('download_question', 'Can download question files'),),
            },
        ),
        migrations.CreateModel(
            name='QuestionActivity',
            fields=[
                ('activity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_activities.Activity')),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_activities.activity',),
        ),
        migrations.CreateModel(
            name='BooleanQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('answer_key', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='CodeIoActivity',
            fields=[
                ('questionactivity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.QuestionActivity')),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_questions.questionactivity',),
        ),
        migrations.CreateModel(
            name='CodingIoQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('iospec_size', models.PositiveIntegerField(blank=True, default=10, help_text='The desired number of test cases that will be computedafter comparing the iospec template with the answer key.This is only a suggested value and will only be applied ifthe response template uses input commands to generaterandom input.', verbose_name='number of iospec template expansions')),
                ('iospec', models.TextField(blank=True, help_text='Template used to grade I/O responses. See http://pythonhosted.org/iospec for a complete reference on the template format.', verbose_name='response template')),
                ('timeout', models.FloatField(default=5.0, help_text='Defines the maximum runtime the grader will spend evaluating each test case.', verbose_name='timeout in seconds')),
            ],
            options={
                'verbose_name_plural': 'input/output questions',
                'verbose_name': 'input/output question',
            },
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='FreeAnswerQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='NumericQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('answer_start', models.FloatField()),
                ('answer_end', models.FloatField(blank=True, null=True)),
                ('is_exact', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='StringMatchQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('template', models.TextField()),
                ('is_regex', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_questions.question',),
        ),
        migrations.AddField(
            model_name='questionactivity',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs_questions.Question'),
        ),
        migrations.AddField(
            model_name='question',
            name='discipline',
            field=models.ForeignKey(blank=True, help_text='This optional field points to the discipline that is the relevant to question.', null=True, on_delete=django.db.models.deletion.CASCADE, to='cs_courses.Discipline'),
        ),
        migrations.AddField(
            model_name='iospecexpansion',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='iospec_expansions', to='cs_questions.CodingIoQuestion'),
        ),
        migrations.AddField(
            model_name='codingioanswerkey',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answer_keys', to='cs_questions.CodingIoQuestion'),
        ),
        migrations.AddField(
            model_name='codeioactivity',
            name='answer_key',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs_questions.CodingIoAnswerKey'),
        ),
        migrations.AlterUniqueTogether(
            name='codingioanswerkey',
            unique_together=set([('question', 'language')]),
        ),
    ]
