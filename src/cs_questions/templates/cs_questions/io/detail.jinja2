{% extends "cs_questions/base-detail.jinja2" %}

{% block header_content %}
    <div class="rules-box">
        <h3>{{ _('Rules') }}</h3>
        <dl>
            <dt>{{ _('Maximum runtime') }}</dt>
            <dd>{{ gettext('%(time)s seconds')|format(time=question.timeout) }}</dd>
        </dl>
    </div>
{% endblock %}

{% block question_input %}
    <div class="code-area">
        <h2>{{ _('Response') }}</h2>
        {% if not lang %}
            <div>
                <p>Programming language:
                    <select name="{{ form['language'].name }}">
                        {% for plang in languages %}
                            <option value="{{ plang.ref }}" {% if plang.ref == form['language'].value %}selected{% endif %}>{{ plang.name }}</option>
                        {% endfor %}
                    </select>
                </p>
            </div>
        {% else %}
            <input type="hidden" name="{{ form['language'].name }}" value="{{ form['language'].value }}">
        {% endif %}

        <table>{{ form['source'] }}</table>
    </div>
{% endblock %}

{% block extra_css %}
    <link rel="stylesheet" type="text/css" href="{% static 'bower_components/codemirror/lib/codemirror.css' %}">
{% endblock %}

{% block style %}
    {{ super() }}
    <style>
        .iospec-testcase {
            padding-left: 30px;
        }
        .iospec-testcase h4 {
            margin-left: -20px;
        }
        .iospec-input {
            color: darkred;
        }
    </style>
{% endblock %}

{% block extra_js %}
    <script type="text/javascript" src="{% static 'bower_components/codemirror/lib/codemirror.js' %}"></script>
    <script type="text/javascript" src="{% static 'bower_components/codemirror/addon/edit/matchbrackets.js' %}"></script>
    <script type="text/javascript" src="{% static 'bower_components/codemirror/mode/python/python.js' %}"></script>
    <script>
        $(function () {
            var editor = CodeMirror.fromTextArea(
                    document.getElementById('id_source'),
                    {
                        mode: "python",
                        version: 3,
                        lineNumbers: true,
                        indentUnit: 4,
                        indentWithTabs: false,
                        matchBrackets: true
                    });
            // Indent with tabs
            editor.setOption("extraKeys", {
                Tab: function (cm) {
                    var spaces = new Array(cm.getOption("indentUnit") + 1).join(" ");
                    cm.replaceSelection(spaces);
                }
            });
        });
    </script>
{% endblock %}
